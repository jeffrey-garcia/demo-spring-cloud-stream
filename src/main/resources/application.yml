# Local RabbitMQ binder config
spring:
  cloud:
    stream:
      rabbit:
        bindings:
          output2:
            producer:
              routingKeyExpression: '"test.event.2"'
              bindingRoutingKey: test.event.2
              confirmAckChannel: publisher-confirm
          output1:
            producer:
              # A SpEL expression to determine the routing key to use when publishing messages
              routingKeyExpression: '"test.event.1"'
              # The routing key  to use when publishing messages
              bindingRoutingKey: test.event.1
              # Make the channel transactional for each publish (not recommended)
              # - transactions become unnecessarily heavyweight and decrease throughput by a factor of 250
              # - can only guarantee message is received by rabbitmq, makes no guarantee that message is
              #   successfully routed to a queue or written to disk
              # - any errors will be reported back to the client asynchronously
#              transacted: true
              # Channel to which to send positive delivery acknowledgments
              # - errorChannelEnabled should be true
              # - connection factory must be configured to enable publisher confirms
              confirmAckChannel: publisher-confirm
          input2:
            consumer:
              bindingRoutingKey: test.event.2
              autoBindDlq: true
              dlqTtl: 15000
              dlqDeadLetterExchange:
                requeueRejected: false
          input1:
            consumer:
              # The routing key with which to bind the queue to the exchange
              bindingRoutingKey: test.event.1
              # Configure the consumer to manually acknowledge message (not recommended)
              # avoid using manual ack since the listener container will do that
              # automatically for you with AUTO ack mode, manual acks is for special
              # use cases such as deferring acks, or early acking.
              #
              # During AUTO ack mode, the default behavior is:
              # - the container will ack the message (and discard it) if the listener exits normally
              # - the container will reject the message (and requeue it) if the listener throws an exception
#              acknowledgeMode: manual
              # The maximum number of consumers
              maxConcurrency: 3
              # dlx/dlq setup
              autoBindDlq: true
              # The backoff time to wait between re-deliveries
              # when the backoff time expired, message from the DLQ are routed back to original queue
              dlqTtl: 15000
              # The dlqDeadLetterExchange property is specified with no value,
              # which means route expired messages to the default exchange DLX
              dlqDeadLetterExchange:
                # When maxAttempt = 1 (internal retry disabled) AND requeueRejected = true
                # any rejected/failed message will be re-queued and retry exhaustively
                # When DLQ is configured, set requeueRejected = false such that any exception thrown
                # can cause the rejected/failed message to be routed to DLQ instead of infinite retry
                requeueRejected: false
      bindings:
        input2:
          destination: demoapp-exchange-2
          contentType: application/json
          binder: local_rabbit
          group: demoapp-queue-2
          consumer:
            maxAttempts: 1
            concurrency: 1
        input1:
          # Set explicit name of the Exchange
          destination: demoapp-exchange-1
          contentType: application/json
          binder: local_rabbit
          # Set explicit name of the Queue
          # allows multiple instance of the consumer to subscribe to the same message queue
          # if group not specified, by default an anonymous queue will be assigned to each consumer instance
          group: demoapp-queue-1
          consumer:
            # Disable default binder retry
            # if not configured, default binder will assume 3 attempts before it considered the retries are exhausted
            # if set to 1, binder internal retry will be disabled and message are routed to DLQ right-away when any exception
            maxAttempts: 1
            # The number of concurrent consumers to initially executeParallel for each listener
            # raise it to scale the consumption of messages coming in from a queue.
            # however, note that any ordering guarantees are lost once multiple
            # consumers are registered.
            # In general, stick with 1 consumer for low-volume queues.
            concurrency: 1
        output2:
          destination: demoapp-exchange-2
          contentType: application/json
          group: demoapp-queue-2
          binder: local_rabbit
          producer:
            errorChannelEnabled: true
        output1:
          # Name of the Exchange
          destination: demoapp-exchange-1
          contentType: application/json
          group: demoapp-queue-1
          binder: local_rabbit
          # Publisher failures are sent to an error channel for the destination,
          # works only when publisherConfirms and publisherReturns are both true
          producer:
            errorChannelEnabled: true
      binders:
        local_rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                # Connect to RabbitMQ cluster and fail-over at the client-side regardless a HA-proxy
                addresses: localhost:5674,localhost:5672
                username: guest
                password: guest
                connectionTimeout: 60000
                # Requested heartbeat timeout, in seconds; zero for none.
                requestedHeartbeat: 15000
                # Configure the connection factory to provide acknowledgement to publishers
                # - guarantee message is not lost during sending to broker cause
                # - if the broker is unable to store a message it will return a nack asynchronously
                #   and refuses responsibility of it, the client could choose to apply retry strategy
                #   or report the failure to upstream
                publisherConfirms: true
                publisherReturns: true

com:
  jeffrey:
    example:
      messaging:
        enabled: true
      eventstore:
        enabled: true
        mongo:
          collectionPrefix: DemoEventStoreV3
        timezone: Asia/Hong_Kong
        consumer:
          ignoreDuplicate: true # enable consumer de-duplication
          expiredTimeInSec: 15 # time to assume retry for published message (not yet consumed)
        retry:
          autoStart: true # disable auto retry if local test
          backoff:
            milliseconds: 30000 # backoff time before initiate next retry (short backoff duration if local test)
          message:
            batchSize: 3 # number of message per retry cycle
            expired:
              seconds: 10 # the time to consider resending the message sent X seconds ago (short message expiry if local test)
      gracefulShutdown:
        enabled: true
        shutdownHook:
          # Shutdown hook timeout in milliseconds (should be larger than Hystrix command execution timeout
          # to ensure that the shutdown does not happen earlier than the last request is completed/fallback by hystrix
          timeoutMillis: 10000

