# Specify a port for local testing to avoid collision with 8080
server.port=8081

# Enable live restart of springboot devtool
spring.devtools.restart.enabled=true

# set application logging to DEBUG to facilitate development
logging.level.com.jeffrey.example=DEBUG

# Disable security to allow access actuator sensitive endpoints
# (includes environment, health, beans, metrics, trace, configprops, and dump)
management.security.enabled=false
#management.endpoints.web.expose=health, info, env, metrics

#management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.include=health, info, env, metrics, bindings

# Spring Actuator Info Endpoint Configuration
management.info.git.mode=full

# Local RabbitMQ config
#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.connection-timeout=60000
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest
#spring.rabbitmq.publisher-confirms=true
#spring.rabbitmq.publisher-returns=true

# Comma-separated list of RabbitMQ node addresses in the cluster
# Connect to RabbitMQ cluster and fail-over at the client-side regardless a HA-proxy
spring.rabbitmq.addresses=localhost:5674,localhost:5672
spring.rabbitmq.requested-heartbeat=15000

# Register with Eureka
# default to http://localhost:8761/eureka/
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# configure this service to be in a specific zone
# so lookup to other service within same zone will be faster
eureka.instance.metadataMap.zone=zone1
eureka.client.preferSameZoneEureka=true

# force eureka dashboard to use ip address instead of hostname
# for local development during offline mode
eureka.instance.preferIpAddress=true

# speed up the frequency of heartbeat between instance and registry (use for local dev only!!!)
# In production it's probably better to stick with the default because there are some computations
# internally in the server that make assumptions about the lease renewal period.
eureka.instance.leaseRenewalIntervalInSeconds=1

# Zipkin configuration
# find Zipkin through service discovery, pass the Zipkinâ€™s service ID inside the URL
#spring.zipkin.baseUrl=http://localhost:9411
spring.zipkin.baseUrl=http://demo-zipkin-server
spring.zipkin.enabled=true
spring.zipkin.sender.type=web

# Sleuth Distributed Tracing
# configure the probability of spans exported
# override the default sampling percentage and set it to 100% to capture everything
# all incoming requests are sampled and that decision is honored downstream.
# do NOT use this for production!!!
spring.sleuth.sampler.probability=1.0

# trigger ribbon to refresh service list more frequently
# do NOT use this for production!!!
ribbon.ServerListRefreshInterval=5000

# Connecting to a MongoDB default database using 3.x driver
# default connect to local mongo if not specified
#spring.data.mongodb.uri=mongodb://127.0.0.1:27017/test

# Connecting to a MongoDB replica set named replocal with members running on the specified hosts
# connects to a replica set with:
# - distributes reads to the secondaries (must be primary within transaction)
# - write concern configured to wait for replication
# to succeed across a majority of the data-bearing voting members, with a two-second timeout.
#
# Read-operations can be served by any slave, so you can increase read-performance by
# adding more slaves to the replica-set (provided that your client application is capable
# to actually use different set-members). But write-operations always take place on the
# master of the replica-set and are then propagated to the slaves, so writes won't get
# faster when you add more slaves.
#
# Replica-sets also offer fault-tolerance. When one of the members of the replica-set goes down,
# the others take over. When the master goes down, the slaves will elect a new master. For that
# reason it is suggested for productive deployment to always use MongoDB as a replica-set of at
# least three servers, two of them holding data (the third one is a data-less "arbiter" which is
# required for determining a new master when one of the slaves goes down).
#
#spring.data.mongodb.uri=mongodb://127.0.0.1:27017,127.0.0.1:27018/test?replicaSet=replocal&readPreference=secondary&w=majority&wtimeoutMS=2000
spring.data.mongodb.uri=mongodb://127.0.0.1:27017,127.0.0.1:27018/test?replicaSet=replocal&w=majority&wtimeoutMS=2000